// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ntgroup.Data;

#nullable disable

namespace ntgroup.Data.Migrations
{
    [DbContext(typeof(ntgroupDbContext))]
    [Migration("20241231082508_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "12/31/2024 3:25:07 PM",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "12/31/2024 3:25:07 PM",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRUCTOR"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "12/31/2024 3:25:07 PM",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "12/31/2024 3:25:07 PM",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "5",
                            ConcurrencyStamp = "12/31/2024 3:25:07 PM",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "OWNER-AUGCENTER-2023",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "ADMIN-AUGCENTER-2023",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "EMPLOYEE-AUGCENTER-2023",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "GUEST-AUGCENTER-2023",
                            RoleId = "5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ntgroup.Data.Entities.TimepieceDTO", b =>
                {
                    b.Property<string>("tp_ID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("taxi_NumberId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("taxi_NumberPlate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("tp_Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("tp_EndPoint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("tp_Kilometer")
                        .HasColumnType("int");

                    b.Property<int>("tp_KilometerEmpty")
                        .HasColumnType("int");

                    b.Property<int>("tp_KilometerTotal")
                        .HasColumnType("int");

                    b.Property<string>("tp_StartPoint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("tp_TimeEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("tp_TimeStart")
                        .HasColumnType("datetime(6)");

                    b.HasKey("tp_ID");

                    b.ToTable("TimepiecesDTO");
                });

            modelBuilder.Entity("ntgroup.Data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "OWNER-AUGCENTER-2023",
                            AccessFailedCount = 0,
                            Address = "",
                            Biography = "",
                            ConcurrencyStamp = "15eeeca5-8d0f-40d1-814f-a3b15cfca67c",
                            Email = "owner@augcenter.com",
                            EmailConfirmed = false,
                            FirstName = "Aug",
                            Gender = "",
                            LastName = "Center",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER@AUGCENTER.COM",
                            NormalizedUserName = "OWNER@AUGCENTER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH6kCPSA0riinIX5nPA/ULDIV+PWqbcFv2V9d9nZIVlusmzcAV/SA83eAp5zUWLQiA==",
                            PhoneNumber = "0868752251",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de18d80a-0086-4652-9d15-fbedeccfc540",
                            TwoFactorEnabled = false,
                            UserName = "owner@augcenter.com"
                        },
                        new
                        {
                            Id = "ADMIN-AUGCENTER-2023",
                            AccessFailedCount = 0,
                            Address = "",
                            Biography = "",
                            ConcurrencyStamp = "2c9e4e29-b8de-47f4-808b-7f94fee0ba79",
                            Email = "administructor@augcenter.com",
                            EmailConfirmed = false,
                            FirstName = "Aug",
                            Gender = "",
                            LastName = "Center",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRUCTOR@AUGCENTER.COM",
                            NormalizedUserName = "ADMINISTRUCTOR@AUGCENTER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBrJfhm9d0MjkznlbL8r39fUqaYeKGUDkfNEJ00PQUNEAhRObKpq79uFOxFgWxe5FA==",
                            PhoneNumber = "0868752251",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59730c11-c65a-4c12-a1c0-9a65585cf93e",
                            TwoFactorEnabled = false,
                            UserName = "administructor@augcenter.com"
                        },
                        new
                        {
                            Id = "EMPLOYEE-AUGCENTER-2023",
                            AccessFailedCount = 0,
                            Address = "",
                            Biography = "",
                            ConcurrencyStamp = "516fe473-e92b-4113-9e19-e79b7e0a4e42",
                            Email = "employee@augcenter.com",
                            EmailConfirmed = false,
                            FirstName = "EMPLOYEE",
                            Gender = "",
                            LastName = "N/A",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE@AUGCENTER.COM",
                            NormalizedUserName = "EMPLOYEE@AUGCENTER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFjY3VHKQtRXEh09KzVEh4W/WeAQ/qfvroaujr1oew6iRZH2/HschcFRgcYcRBDZ7Q==",
                            PhoneNumber = "0868752251",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51ec8eca-9831-4069-8e39-3528351321b1",
                            TwoFactorEnabled = false,
                            UserName = "employee@augcenter.com"
                        },
                        new
                        {
                            Id = "GUEST-AUGCENTER-2023",
                            AccessFailedCount = 0,
                            Address = "",
                            Biography = "",
                            ConcurrencyStamp = "047b3442-e9e5-45ce-8d91-e4a8f1d1a59b",
                            Email = "guester@augcenter.com",
                            EmailConfirmed = false,
                            FirstName = "GUEST",
                            Gender = "",
                            LastName = "N/A",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@AUGCENTER.COM",
                            NormalizedUserName = "GUEST@AUGCENTER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIn4iOFnno583REqYu64z5eBnJVy+KrEEmbSGgXMhsYQF34A9VkNQSCLCbCFs7oAPw==",
                            PhoneNumber = "0868752251",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06bfdc18-c7ea-4db6-8377-c5011b4135ac",
                            TwoFactorEnabled = false,
                            UserName = "guester@augcenter.com"
                        });
                });

            modelBuilder.Entity("ntgroup.Data.Models.Car", b =>
                {
                    b.Property<string>("car_Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("car_CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("car_DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("car_NumberId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("car_NumberPlate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("driver_Id")
                        .HasColumnType("varchar(255)");

                    b.HasKey("car_Id");

                    b.HasIndex("driver_Id")
                        .IsUnique();

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            car_Id = "BL3012",
                            car_CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 25, 8, 88, DateTimeKind.Unspecified).AddTicks(1842), new TimeSpan(0, 7, 0, 0, 0)),
                            car_DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            car_NumberId = "BL3012",
                            car_NumberPlate = "94H-011.97",
                            driver_Id = "DRIVER-0064"
                        },
                        new
                        {
                            car_Id = "BL3014",
                            car_CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 25, 8, 88, DateTimeKind.Unspecified).AddTicks(1846), new TimeSpan(0, 7, 0, 0, 0)),
                            car_DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            car_NumberId = "BL3014",
                            car_NumberPlate = "94H-011.36",
                            driver_Id = "DRIVER-0095"
                        },
                        new
                        {
                            car_Id = "BL3017",
                            car_CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 25, 8, 88, DateTimeKind.Unspecified).AddTicks(1852), new TimeSpan(0, 7, 0, 0, 0)),
                            car_DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            car_NumberId = "BL3017",
                            car_NumberPlate = "94H-011.31",
                            driver_Id = "DRIVER-0108"
                        });
                });

            modelBuilder.Entity("ntgroup.Data.Models.Drive", b =>
                {
                    b.Property<string>("drive_Id")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("drive_Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTimeOffset?>("drive_CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("drive_DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("drive_Revenue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("drive_TotalRevenue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("driver_Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("transaction_Id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("drive_Id");

                    b.HasIndex("driver_Id");

                    b.ToTable("Drives");
                });

            modelBuilder.Entity("ntgroup.Data.Models.DriveDetail", b =>
                {
                    b.Property<string>("drivedetail_Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("driveType")
                        .HasColumnType("int");

                    b.Property<string>("drive_Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("drivedetail_CompletedAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("drivedetail_CreateAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("drivedetail_Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("drivedetail_Distance")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("drivedetail_DropOff")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("drivedetail_PickUp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("drivedetail_Price")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("drivedetail_Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("drivetype_Id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("drivedetail_Id");

                    b.HasIndex("drive_Id");

                    b.ToTable("DriveDetails");
                });

            modelBuilder.Entity("ntgroup.Data.Models.DriveDetailType", b =>
                {
                    b.Property<string>("drivetype_Id")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("drivetype_CollectArrears")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTimeOffset?>("drivetype_CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("drivetype_DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("drivetype_Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("drivetype_Discount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("drivetype_Distance")
                        .HasColumnType("int");

                    b.Property<int?>("drivetype_DistanceMore")
                        .HasColumnType("int");

                    b.Property<int?>("drivetype_During")
                        .HasColumnType("int");

                    b.Property<int?>("drivetype_DuringMore")
                        .HasColumnType("int");

                    b.Property<string>("drivetype_Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("drivetype_Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("drivetype_TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("drivetype_Id");

                    b.ToTable("DriveDetailTypes");
                });

            modelBuilder.Entity("ntgroup.Data.Models.Driver", b =>
                {
                    b.Property<string>("driver_Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("driver_Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("driver_CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("driver_DeleteddAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("driver_EmployeeID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("driver_Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("driver_Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("driver_Id");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            driver_Id = "DRIVER-0064",
                            driver_Address = "",
                            driver_CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 25, 8, 88, DateTimeKind.Unspecified).AddTicks(1673), new TimeSpan(0, 7, 0, 0, 0)),
                            driver_EmployeeID = "0064",
                            driver_Name = "CHUNG THANH CƯỜNG",
                            driver_Phone = "0328008459"
                        },
                        new
                        {
                            driver_Id = "DRIVER-0095",
                            driver_Address = "",
                            driver_CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 25, 8, 88, DateTimeKind.Unspecified).AddTicks(1776), new TimeSpan(0, 7, 0, 0, 0)),
                            driver_EmployeeID = "0095",
                            driver_Name = "ĐỒNG HOÀNG VỸ",
                            driver_Phone = "0888718961"
                        },
                        new
                        {
                            driver_Id = "DRIVER-0108",
                            driver_Address = "",
                            driver_CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 25, 8, 88, DateTimeKind.Unspecified).AddTicks(1779), new TimeSpan(0, 7, 0, 0, 0)),
                            driver_EmployeeID = "0108",
                            driver_Name = "ONG QUỐC THÁI",
                            driver_Phone = "0943141852"
                        });
                });

            modelBuilder.Entity("ntgroup.Data.Models.Shiftwork", b =>
                {
                    b.Property<string>("sw_Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("car_Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("driver_Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset?>("sw_CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("sw_DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("sw_Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("sw_TimeEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("sw_TimeStart")
                        .HasColumnType("datetime(6)");

                    b.HasKey("sw_Id");

                    b.HasIndex("car_Id");

                    b.HasIndex("driver_Id");

                    b.ToTable("Shiftworks");
                });

            modelBuilder.Entity("ntgroup.Data.Models.Timepiece", b =>
                {
                    b.Property<string>("tp_Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("sw_Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("tp_Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("tp_CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("tp_DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("tp_EndPoint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("tp_Kilometer")
                        .HasColumnType("int");

                    b.Property<int>("tp_KilometerEmpty")
                        .HasColumnType("int");

                    b.Property<int>("tp_KilometerTotal")
                        .HasColumnType("int");

                    b.Property<string>("tp_StartPoint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("tp_TimeEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("tp_TimeStart")
                        .HasColumnType("datetime(6)");

                    b.HasKey("tp_Id");

                    b.HasIndex("sw_Id");

                    b.ToTable("Timepieces");
                });

            modelBuilder.Entity("ntgroup.Data.Models.Wallet", b =>
                {
                    b.Property<string>("wallet_Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("driver_Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("wallet_Balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTimeOffset?>("wallet_CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("wallet_DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("wallet_Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("wallet_Id");

                    b.HasIndex("driver_Id")
                        .IsUnique();

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            wallet_Id = "WALLET-001",
                            driver_Id = "DRIVER-0108",
                            wallet_Balance = 2000000m,
                            wallet_CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 25, 8, 88, DateTimeKind.Unspecified).AddTicks(1995), new TimeSpan(0, 7, 0, 0, 0)),
                            wallet_Description = "Trang thái tối thiếu"
                        },
                        new
                        {
                            wallet_Id = "WALLET-002",
                            driver_Id = "DRIVER-0095",
                            wallet_Balance = 1500000m,
                            wallet_CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 25, 8, 88, DateTimeKind.Unspecified).AddTicks(2006), new TimeSpan(0, 7, 0, 0, 0)),
                            wallet_Description = "Không đạt tối thiếu"
                        },
                        new
                        {
                            wallet_Id = "WALLET-003",
                            driver_Id = "DRIVER-0064",
                            wallet_Balance = 50000000m,
                            wallet_CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 25, 8, 88, DateTimeKind.Unspecified).AddTicks(2008), new TimeSpan(0, 7, 0, 0, 0)),
                            wallet_Description = "Tốt"
                        });
                });

            modelBuilder.Entity("ntgroup.Data.Models.WalletTransaction", b =>
                {
                    b.Property<string>("transaction_Id")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("transaction_Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTimeOffset?>("transaction_CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("transaction_DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("transaction_Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("transactiontype_Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("wallet_Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("transaction_Id");

                    b.HasIndex("transactiontype_Id");

                    b.HasIndex("wallet_Id");

                    b.ToTable("WalletTransactions");

                    b.HasData(
                        new
                        {
                            transaction_Id = "e06a3ef1-fbc6-4871-a896-3e78b127d8c3",
                            transaction_Amount = 53000m,
                            transaction_CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 25, 8, 88, DateTimeKind.Unspecified).AddTicks(2158), new TimeSpan(0, 7, 0, 0, 0)),
                            transaction_Description = "Đã chạy xong",
                            transactiontype_Id = "DEPOSIT",
                            wallet_Id = "WALLET-001"
                        },
                        new
                        {
                            transaction_Id = "c302ffb3-5d26-4f1e-9173-0f5b40840dfe",
                            transaction_Amount = 47000m,
                            transaction_CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 25, 8, 88, DateTimeKind.Unspecified).AddTicks(2172), new TimeSpan(0, 7, 0, 0, 0)),
                            transaction_Description = "Đã chạy xong",
                            transactiontype_Id = "DEPOSIT",
                            wallet_Id = "WALLET-002"
                        },
                        new
                        {
                            transaction_Id = "ef09703a-f068-4ba3-a649-3d2a38b12e5e",
                            transaction_Amount = 35000m,
                            transaction_CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 25, 8, 88, DateTimeKind.Unspecified).AddTicks(2177), new TimeSpan(0, 7, 0, 0, 0)),
                            transaction_Description = "Đã chạy xong",
                            transactiontype_Id = "DEPOSIT",
                            wallet_Id = "WALLET-003"
                        },
                        new
                        {
                            transaction_Id = "70813cd5-5832-4f5f-b98a-d5217d8abfcc",
                            transaction_Amount = 111000m,
                            transaction_CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 25, 8, 88, DateTimeKind.Unspecified).AddTicks(2181), new TimeSpan(0, 7, 0, 0, 0)),
                            transaction_Description = "Đã chạy xong",
                            transactiontype_Id = "DEPOSIT",
                            wallet_Id = "WALLET-001"
                        },
                        new
                        {
                            transaction_Id = "3562881c-c214-4cbe-a874-dbea514a7c9a",
                            transaction_Amount = 1000000m,
                            transaction_CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 25, 8, 88, DateTimeKind.Unspecified).AddTicks(2195), new TimeSpan(0, 7, 0, 0, 0)),
                            transaction_Description = "Đã chạy xong",
                            transactiontype_Id = "DEPOSIT",
                            wallet_Id = "WALLET-002"
                        },
                        new
                        {
                            transaction_Id = "7fae474d-5a6e-4449-a149-6f354e6fd892",
                            transaction_Amount = 1000000m,
                            transaction_CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 25, 8, 88, DateTimeKind.Unspecified).AddTicks(2205), new TimeSpan(0, 7, 0, 0, 0)),
                            transaction_Description = "Đã chạy xong",
                            transactiontype_Id = "DEPOSIT",
                            wallet_Id = "WALLET-001"
                        });
                });

            modelBuilder.Entity("ntgroup.Data.Models.WalletTransactionType", b =>
                {
                    b.Property<string>("transactiontype_Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("transactiontype_Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("transactiontype_Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("transactiontype_Id");

                    b.ToTable("WalletTransactionTypes");

                    b.HasData(
                        new
                        {
                            transactiontype_Id = "DEPOSIT",
                            transactiontype_Description = "Nạp tiền vào ví, để tăng số tiền hiện có",
                            transactiontype_Name = "Nạp tiền"
                        },
                        new
                        {
                            transactiontype_Id = "WITHDRAW",
                            transactiontype_Description = "Rút tiền về tài khoản ngân hàng",
                            transactiontype_Name = "Rút tiền"
                        },
                        new
                        {
                            transactiontype_Id = "PAYMENT",
                            transactiontype_Description = "Thanh toán tiền cuốc xe",
                            transactiontype_Name = "Thanh toán"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ntgroup.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ntgroup.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntgroup.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ntgroup.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ntgroup.Data.Models.Car", b =>
                {
                    b.HasOne("ntgroup.Data.Models.Driver", "driver")
                        .WithOne("car")
                        .HasForeignKey("ntgroup.Data.Models.Car", "driver_Id");

                    b.Navigation("driver");
                });

            modelBuilder.Entity("ntgroup.Data.Models.Drive", b =>
                {
                    b.HasOne("ntgroup.Data.Models.Driver", "driver")
                        .WithMany("drives")
                        .HasForeignKey("driver_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntgroup.Data.Models.WalletTransaction", "transaction")
                        .WithMany()
                        .HasForeignKey("driver_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("driver");

                    b.Navigation("transaction");
                });

            modelBuilder.Entity("ntgroup.Data.Models.DriveDetail", b =>
                {
                    b.HasOne("ntgroup.Data.Models.Drive", "drive")
                        .WithMany("drivedetails")
                        .HasForeignKey("drive_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("drive");
                });

            modelBuilder.Entity("ntgroup.Data.Models.Shiftwork", b =>
                {
                    b.HasOne("ntgroup.Data.Models.Car", "car")
                        .WithMany()
                        .HasForeignKey("car_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntgroup.Data.Models.Driver", "driver")
                        .WithMany()
                        .HasForeignKey("driver_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("car");

                    b.Navigation("driver");
                });

            modelBuilder.Entity("ntgroup.Data.Models.Timepiece", b =>
                {
                    b.HasOne("ntgroup.Data.Models.Shiftwork", "shiftwork")
                        .WithMany()
                        .HasForeignKey("sw_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("shiftwork");
                });

            modelBuilder.Entity("ntgroup.Data.Models.Wallet", b =>
                {
                    b.HasOne("ntgroup.Data.Models.Driver", "driver")
                        .WithOne("wallet")
                        .HasForeignKey("ntgroup.Data.Models.Wallet", "driver_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("driver");
                });

            modelBuilder.Entity("ntgroup.Data.Models.WalletTransaction", b =>
                {
                    b.HasOne("ntgroup.Data.Models.WalletTransactionType", "wallettransactiontype")
                        .WithMany("wallettransactions")
                        .HasForeignKey("transactiontype_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntgroup.Data.Models.Wallet", "wallet")
                        .WithMany("wallettransactions")
                        .HasForeignKey("wallet_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("wallet");

                    b.Navigation("wallettransactiontype");
                });

            modelBuilder.Entity("ntgroup.Data.Models.Drive", b =>
                {
                    b.Navigation("drivedetails");
                });

            modelBuilder.Entity("ntgroup.Data.Models.Driver", b =>
                {
                    b.Navigation("car");

                    b.Navigation("drives");

                    b.Navigation("wallet");
                });

            modelBuilder.Entity("ntgroup.Data.Models.Wallet", b =>
                {
                    b.Navigation("wallettransactions");
                });

            modelBuilder.Entity("ntgroup.Data.Models.WalletTransactionType", b =>
                {
                    b.Navigation("wallettransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
