<MudDrawerHeader Class="d-flex justify-center pa-3" Style="@($"background:#d9fad9;")">
    <MudImage Src="imgs/logo-namthang.png" Height="55" Alt="Nam Thắng Logo" />
</MudDrawerHeader>
<MudDrawerContainer>
    <MudNavMenu>
        <MudNavLink Href="/" Match="NavLinkMatch.All">Trang chủ</MudNavLink>
        <!-- Hiển thị "Doanh thu" chỉ khi user là Admin hoặc Owner -->
        <AuthorizeView Roles="Owner,Manager,Accountant,Checker">
            <Authorized>
                <MudNavLink Href="/revenues"  Match="NavLinkMatch.All">Doanh thu</MudNavLink>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView>
            <NotAuthorized>
                <MudNavLink Href="/login"  Match="NavLinkMatch.All">
                    <MudItem Class="d-flex">
                        <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Login"/>
                        <MudText Color="Color.Error">Đăng nhập</MudText>
                    </MudItem>
                </MudNavLink>
            </NotAuthorized>
            <Authorized>
                <MudNavLink>
                    <MudItem @onclick="@(()=> Logout_Click())" Class="d-flex"  Match="NavLinkMatch.All">
                        <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Logout"/>
                        <MudText Color="Color.Error">Đăng xuất</MudText>
                    </MudItem>
                </MudNavLink>
            </Authorized>
        </AuthorizeView>
    </MudNavMenu>
</MudDrawerContainer>

@code {

    [Inject]
    IAuthenService authService { get; set; }
    [Inject]
    NavigationManager nav { get; set; }
    //Hiển thị thông báo khi add/update/deleted category
    [Inject]
    ISnackbar snackBar { get; set; }

    async Task Logout_Click()
    {
        try
        {
            await this.authService.LogOut();

            snackBar.Add($"Đã đăng xuất thành công.", Severity.Success);
            //Chuyển về trang chủ
            nav.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            snackBar.Add($"Lỗi: {ex.Message}.", Severity.Error);
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        try
        {
            if (firstRender) await authService.GetAuthenState();
        }
        catch (Exception ex)
        {
            await authService.LogOut();
            throw new Exception("Authentication error: " + ex.Message);
        }
    }
}